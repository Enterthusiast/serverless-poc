# serverless.yml

service: my-express-application

custom:
  tableName: 'users-table-${self:provider.stage}'
  dynamodb:
    start:
      port: 4300
      migrate: true
  serverless-offline:
    port: 4400

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  createUser:
    handler: index.handler
    events:
      - http: 'POST /users'
  readUser:
    handler: index.handler
    events:
      - http: 'GET /users/{proxy+}'
  readUserList:
    handler: index.handler
    events:
      - http: 'GET /users'
  updateUser:
    handler: index.handler
    events:
      - http: 'PUT /users/{proxy+}'
  deleteUser:
    handler: index.handler
    events:
      - http: 'DELETE /users/{proxy+}'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

plugins:
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list